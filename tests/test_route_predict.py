import pytest
import json

@pytest.fixture
def valid_data():
    """Données valides pour la prédiction."""
    return {
        "SK_ID_CURR": 100001,
        "NAME_CONTRACT_TYPE": "Cash loans",
        "CODE_GENDER": "M",
        "FLAG_OWN_CAR": "Y",
        "FLAG_OWN_REALTY": "Y",
        "CNT_CHILDREN": 0,
        "AMT_INCOME_TOTAL": 20000,
        "AMT_CREDIT": 50000,
        "AMT_ANNUITY": 2500,
        "AMT_GOODS_PRICE": 100000,
        "NAME_TYPE_SUITE": "Unaccompanied",
        "NAME_INCOME_TYPE": "Working",
        "NAME_EDUCATION_TYPE": "Secondary / secondary special",
        "NAME_FAMILY_STATUS": "Single / not married",
        "NAME_HOUSING_TYPE": "Rented apartment",
        "REGION_POPULATION_RELATIVE": 0.03,
        "DAYS_BIRTH": -10000,
        "DAYS_EMPLOYED": -500,
        "DAYS_REGISTRATION": -1000,
        "DAYS_ID_PUBLISH": -1000,
        "OWN_CAR_AGE": 5,
        "FLAG_MOBIL": 1,
        "FLAG_EMP_PHONE": 1,
        "FLAG_WORK_PHONE": 0,
        "FLAG_CONT_MOBILE": 1,
        "FLAG_PHONE": 1,
        "FLAG_EMAIL": 1,
        "OCCUPATION_TYPE": "Laborers",
        "CNT_FAM_MEMBERS": 2,
        "REGION_RATING_CLIENT": 2,
        "REGION_RATING_CLIENT_W_CITY": 2,
        "WEEKDAY_APPR_PROCESS_START": 0,
        "HOUR_APPR_PROCESS_START": 12,
        "REG_REGION_NOT_LIVE_REGION": 0,
        "REG_REGION_NOT_WORK_REGION": 0,
        "LIVE_REGION_NOT_WORK_REGION": 0,
        "REG_CITY_NOT_LIVE_CITY": 0,
        "REG_CITY_NOT_WORK_CITY": 0,
        "LIVE_CITY_NOT_WORK_CITY": 0,
        "ORGANIZATION_TYPE": "Business Entity Type 3",
        "EXT_SOURCE_1": 0.1,
        "EXT_SOURCE_2": 0.2,
        "EXT_SOURCE_3": 0.3,
        "APARTMENTS_AVG": 1.0,
        "BASEMENTAREA_AVG": 0.5,
        "YEARS_BEGINEXPLUATATION_AVG": 10,
        "YEARS_BUILD_AVG": 15,
        "COMMONAREA_AVG": 0.3,
        "ELEVATORS_AVG": 2,
        "ENTRANCES_AVG": 3,
        "FLOORSMAX_AVG": 5,
        "FLOORSMIN_AVG": 1,
        "LANDAREA_AVG": 500,
        "LIVINGAPARTMENTS_AVG": 2,
        "LIVINGAREA_AVG": 60,
        "NONLIVINGAPARTMENTS_AVG": 1,
        "NONLIVINGAREA_AVG": 50,
        "APARTMENTS_MODE": 1,
        "BASEMENTAREA_MODE": 0.5,
        "YEARS_BEGINEXPLUATATION_MODE": 12,
        "YEARS_BUILD_MODE": 16,
        "COMMONAREA_MODE": 0.4,
        "ELEVATORS_MODE": 2,
        "ENTRANCES_MODE": 3,
        "FLOORSMAX_MODE": 5,
        "FLOORSMIN_MODE": 1,
        "LANDAREA_MODE": 550,
        "LIVINGAPARTMENTS_MODE": 2,
        "LIVINGAREA_MODE": 65,
        "NONLIVINGAPARTMENTS_MODE": 1,
        "NONLIVINGAREA_MODE": 55,
        "APARTMENTS_MEDI": 1,
        "BASEMENTAREA_MEDI": 0.6,
        "YEARS_BEGINEXPLUATATION_MEDI": 11,
        "YEARS_BUILD_MEDI": 14,
        "COMMONAREA_MEDI": 0.35,
        "ELEVATORS_MEDI": 2,
        "ENTRANCES_MEDI": 3,
        "FLOORSMAX_MEDI": 5,
        "FLOORSMIN_MEDI": 1,
        "LANDAREA_MEDI": 600,
        "LIVINGAPARTMENTS_MEDI": 2,
        "LIVINGAREA_MEDI": 70,
        "NONLIVINGAPARTMENTS_MEDI": 1,
        "NONLIVINGAREA_MEDI": 60,
        "FONDKAPREMONT_MODE": "unnecessary",
        "HOUSETYPE_MODE": "block of flats",
        "TOTALAREA_MODE": 150,
        "WALLSMATERIAL_MODE": "stone",
        "EMERGENCYSTATE_MODE": "No",
        "OBS_30_CNT_SOCIAL_CIRCLE": 2,
        "DEF_30_CNT_SOCIAL_CIRCLE": 0,
        "OBS_60_CNT_SOCIAL_CIRCLE": 1,
        "DEF_60_CNT_SOCIAL_CIRCLE": 0,
        "DAYS_LAST_PHONE_CHANGE": -200,
        "FLAG_DOCUMENT_2": 1,
        "FLAG_DOCUMENT_3": 1,
        "FLAG_DOCUMENT_4": 0,
        "FLAG_DOCUMENT_5": 0,
        "FLAG_DOCUMENT_6": 1,
        "FLAG_DOCUMENT_7": 1,
        "FLAG_DOCUMENT_8": 1,
        "FLAG_DOCUMENT_9": 1,
        "FLAG_DOCUMENT_10": 0,
        "FLAG_DOCUMENT_11": 0,
        "FLAG_DOCUMENT_12": 1,
        "FLAG_DOCUMENT_13": 0,
        "FLAG_DOCUMENT_14": 0,
        "FLAG_DOCUMENT_15": 0,
        "FLAG_DOCUMENT_16": 0,
        "FLAG_DOCUMENT_17": 0,
        "FLAG_DOCUMENT_18": 0,
        "FLAG_DOCUMENT_19": 0,
        "FLAG_DOCUMENT_20": 0,
        "FLAG_DOCUMENT_21": 0,
        "AMT_REQ_CREDIT_BUREAU_HOUR": 0,
        "AMT_REQ_CREDIT_BUREAU_DAY": 1,
        "AMT_REQ_CREDIT_BUREAU_WEEK": 0,
        "AMT_REQ_CREDIT_BUREAU_MON": 2,
        "AMT_REQ_CREDIT_BUREAU_QRT": 0,
        "AMT_REQ_CREDIT_BUREAU_YEAR": 5,
        "BUREAU_AMT_CREDIT_SUM_SUM": 200000,
        "BUREAU_AMT_CREDIT_SUM_MEAN": 150000,
        "BUREAU_AMT_CREDIT_SUM_MAX": 100000,
        "BUREAU_AMT_CREDIT_SUM_DEBT_SUM": 100000,
        "BUREAU_AMT_CREDIT_SUM_DEBT_MEAN": 50000,
        "BUREAU_AMT_CREDIT_SUM_DEBT_MAX": 60000,
        "BUREAU_DAYS_CREDIT_MEAN": -200,
        "BUREAU_DAYS_CREDIT_MIN": -300,
        "POS_SK_DPD": 0,
        "POS_SK_DPD_DEF": 0,
        "POS_CNT_INSTALMENT": 1,
        "POS_CNT_INSTALMENT_FUTURE": 1,
        "CREDIT_CARD_AMT_BALANCE": 5000,
        "CREDIT_CARD_AMT_CREDIT_LIMIT_ACTUAL": 10000,
        "CREDIT_CARD_AMT_DRAWINGS_ATM_CURRENT": 1000,
        "CREDIT_CARD_AMT_PAYMENT_CURRENT": 500,
        "PREVIOUS_AMT_APPLICATION": 0,
        "PREVIOUS_AMT_CREDIT": 10000,
        "PREVIOUS_CNT_PAYMENT": 1,
        "INSTALLMENTS_AMT_INSTALMENT": 200,
        "INSTALLMENTS_AMT_PAYMENT": 250,
        "INSTALLMENTS_NUM_INSTALMENT_NUMBER": 12,
        "income_credit_ratio": 0.2,
        "age": 30,
        "years_employed": 10,
        "log_AMT_INCOME_TOTAL": 9.9,
        "annuity_income_ratio": 0.1,
        "log_AMT_CREDIT": 10.8,
        "is_employed": 1,
        "credit_income_ratio": 0.25,
        "debt_to_income_ratio": 0.3
    }

def test_predict_valid_data(client, valid_data):
    """Test de la route de prédiction avec des données valides."""
    # Envoi de la requête POST avec des données valides
    response = client.post('/predict', data=json.dumps(valid_data), content_type='application/json')
    
    # Vérification que la réponse a un code de statut 200
    assert response.status_code == 200
    
    # Vérification que la réponse contient les bonnes clés (prediction et probability)
    response_json = response.get_json()
    assert 'prediction' in response_json
    assert 'probability' in response_json
    
    # Vérification que les valeurs sont dans des plages attendues
    assert isinstance(response_json['prediction'], int)
    assert isinstance(response_json['probability'], float)
    assert 0 <= response_json['probability'] <= 1  # La probabilité doit être entre 0 et 1

